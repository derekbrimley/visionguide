{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { getAllQuestions, getQuestionsByCategory } from '../data/questions';\nimport { categoryOrder } from '../data/wealthCategories';\nexport const useQuestionnaire = () => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentCategoryIndex, setCurrentCategoryIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n  const allQuestions = getAllQuestions();\n  const currentCategory = categoryOrder[currentCategoryIndex];\n  const currentCategoryQuestions = getQuestionsByCategory(currentCategory);\n  const questionIndexInCategory = currentQuestionIndex - categoryOrder.slice(0, currentCategoryIndex).reduce((acc, cat) => acc + getQuestionsByCategory(cat).length, 0);\n  const currentQuestion = allQuestions[currentQuestionIndex];\n\n  // Progress calculations\n  const totalQuestions = allQuestions.length;\n  const progress = (currentQuestionIndex + 1) / totalQuestions * 100;\n  const categoryProgress = (questionIndexInCategory + 1) / currentCategoryQuestions.length * 100;\n\n  // Answer handling\n  const setAnswer = useCallback((questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  }, []);\n  const getAnswer = useCallback(questionId => {\n    return answers[questionId] || '';\n  }, [answers]);\n\n  // Navigation\n  const canGoNext = useCallback(() => {\n    if (!currentQuestion) return false;\n    const answer = getAnswer(currentQuestion.id);\n    if (currentQuestion.required && (!answer || answer === '')) {\n      return false;\n    }\n    return currentQuestionIndex < totalQuestions - 1;\n  }, [currentQuestion, currentQuestionIndex, totalQuestions, getAnswer]);\n  const canGoPrevious = useCallback(() => {\n    return currentQuestionIndex > 0;\n  }, [currentQuestionIndex]);\n  const goNext = useCallback(() => {\n    if (canGoNext()) {\n      const nextIndex = currentQuestionIndex + 1;\n      setCurrentQuestionIndex(nextIndex);\n\n      // Check if we've moved to a new category\n      let nextCategoryIndex = currentCategoryIndex;\n      let questionsUpToCategory = 0;\n      for (let i = 0; i <= nextCategoryIndex; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (nextIndex >= questionsUpToCategory + categoryQuestions.length) {\n          nextCategoryIndex++;\n          questionsUpToCategory += categoryQuestions.length;\n        } else {\n          break;\n        }\n      }\n      if (nextCategoryIndex !== currentCategoryIndex) {\n        setCurrentCategoryIndex(nextCategoryIndex);\n      }\n    } else if (currentQuestionIndex === totalQuestions - 1) {\n      setIsComplete(true);\n    }\n  }, [canGoNext, currentQuestionIndex, currentCategoryIndex, totalQuestions]);\n  const goPrevious = useCallback(() => {\n    if (canGoPrevious()) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n\n      // Check if we've moved to a previous category\n      let prevCategoryIndex = currentCategoryIndex;\n      let questionsUpToCategory = 0;\n      for (let i = 0; i < categoryOrder.length; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (prevIndex < questionsUpToCategory + categoryQuestions.length) {\n          prevCategoryIndex = i;\n          break;\n        }\n        questionsUpToCategory += categoryQuestions.length;\n      }\n      if (prevCategoryIndex !== currentCategoryIndex) {\n        setCurrentCategoryIndex(prevCategoryIndex);\n      }\n    }\n  }, [canGoPrevious, currentQuestionIndex, currentCategoryIndex]);\n\n  // Jump to specific question\n  const goToQuestion = useCallback(questionIndex => {\n    if (questionIndex >= 0 && questionIndex < totalQuestions) {\n      setCurrentQuestionIndex(questionIndex);\n\n      // Find the correct category\n      let categoryIndex = 0;\n      let questionsUpToCategory = 0;\n      for (let i = 0; i < categoryOrder.length; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (questionIndex < questionsUpToCategory + categoryQuestions.length) {\n          categoryIndex = i;\n          break;\n        }\n        questionsUpToCategory += categoryQuestions.length;\n      }\n      setCurrentCategoryIndex(categoryIndex);\n    }\n  }, [totalQuestions]);\n\n  // Get answers by category\n  const getAnswersByCategory = useCallback(category => {\n    const categoryQuestions = getQuestionsByCategory(category);\n    const categoryAnswers = {};\n    categoryQuestions.forEach(question => {\n      categoryAnswers[question.id] = answers[question.id] || '';\n    });\n    return categoryAnswers;\n  }, [answers]);\n\n  // Check if category is complete\n  const isCategoryComplete = useCallback(category => {\n    const categoryQuestions = getQuestionsByCategory(category);\n    return categoryQuestions.every(question => {\n      const answer = answers[question.id];\n      return !question.required || answer && answer !== '';\n    });\n  }, [answers]);\n  return {\n    // Current state\n    currentQuestion,\n    currentCategory,\n    currentQuestionIndex,\n    currentCategoryIndex,\n    questionIndexInCategory,\n    isComplete,\n    // Progress\n    progress,\n    categoryProgress,\n    totalQuestions,\n    // Answers\n    answers,\n    setAnswer,\n    getAnswer,\n    getAnswersByCategory,\n    // Navigation\n    canGoNext,\n    canGoPrevious,\n    goNext,\n    goPrevious,\n    goToQuestion,\n    // Category info\n    isCategoryComplete,\n    // Data\n    allQuestions,\n    currentCategoryQuestions\n  };\n};\n_s(useQuestionnaire, \"lKThIc2A68cHb3DYYF2YQHyQJ9M=\");","map":{"version":3,"names":["useState","useCallback","getAllQuestions","getQuestionsByCategory","categoryOrder","useQuestionnaire","_s","currentQuestionIndex","setCurrentQuestionIndex","currentCategoryIndex","setCurrentCategoryIndex","answers","setAnswers","isComplete","setIsComplete","allQuestions","currentCategory","currentCategoryQuestions","questionIndexInCategory","slice","reduce","acc","cat","length","currentQuestion","totalQuestions","progress","categoryProgress","setAnswer","questionId","answer","prev","getAnswer","canGoNext","id","required","canGoPrevious","goNext","nextIndex","nextCategoryIndex","questionsUpToCategory","i","categoryQuestions","goPrevious","prevIndex","prevCategoryIndex","goToQuestion","questionIndex","categoryIndex","getAnswersByCategory","category","categoryAnswers","forEach","question","isCategoryComplete","every"],"sources":["/Users/derek.brimley/personal/vision_guide/vision-guide/src/hooks/useQuestionnaire.js"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { getAllQuestions, getQuestionsByCategory } from '../data/questions';\nimport { categoryOrder } from '../data/wealthCategories';\n\nexport const useQuestionnaire = () => {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentCategoryIndex, setCurrentCategoryIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isComplete, setIsComplete] = useState(false);\n\n  const allQuestions = getAllQuestions();\n  const currentCategory = categoryOrder[currentCategoryIndex];\n  const currentCategoryQuestions = getQuestionsByCategory(currentCategory);\n  const questionIndexInCategory = currentQuestionIndex - \n    categoryOrder.slice(0, currentCategoryIndex).reduce((acc, cat) => \n      acc + getQuestionsByCategory(cat).length, 0);\n\n  const currentQuestion = allQuestions[currentQuestionIndex];\n\n  // Progress calculations\n  const totalQuestions = allQuestions.length;\n  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;\n  const categoryProgress = ((questionIndexInCategory + 1) / currentCategoryQuestions.length) * 100;\n\n  // Answer handling\n  const setAnswer = useCallback((questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  }, []);\n\n  const getAnswer = useCallback((questionId) => {\n    return answers[questionId] || '';\n  }, [answers]);\n\n  // Navigation\n  const canGoNext = useCallback(() => {\n    if (!currentQuestion) return false;\n    const answer = getAnswer(currentQuestion.id);\n    if (currentQuestion.required && (!answer || answer === '')) {\n      return false;\n    }\n    return currentQuestionIndex < totalQuestions - 1;\n  }, [currentQuestion, currentQuestionIndex, totalQuestions, getAnswer]);\n\n  const canGoPrevious = useCallback(() => {\n    return currentQuestionIndex > 0;\n  }, [currentQuestionIndex]);\n\n  const goNext = useCallback(() => {\n    if (canGoNext()) {\n      const nextIndex = currentQuestionIndex + 1;\n      setCurrentQuestionIndex(nextIndex);\n      \n      // Check if we've moved to a new category\n      let nextCategoryIndex = currentCategoryIndex;\n      let questionsUpToCategory = 0;\n      \n      for (let i = 0; i <= nextCategoryIndex; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (nextIndex >= questionsUpToCategory + categoryQuestions.length) {\n          nextCategoryIndex++;\n          questionsUpToCategory += categoryQuestions.length;\n        } else {\n          break;\n        }\n      }\n      \n      if (nextCategoryIndex !== currentCategoryIndex) {\n        setCurrentCategoryIndex(nextCategoryIndex);\n      }\n    } else if (currentQuestionIndex === totalQuestions - 1) {\n      setIsComplete(true);\n    }\n  }, [canGoNext, currentQuestionIndex, currentCategoryIndex, totalQuestions]);\n\n  const goPrevious = useCallback(() => {\n    if (canGoPrevious()) {\n      const prevIndex = currentQuestionIndex - 1;\n      setCurrentQuestionIndex(prevIndex);\n      \n      // Check if we've moved to a previous category\n      let prevCategoryIndex = currentCategoryIndex;\n      let questionsUpToCategory = 0;\n      \n      for (let i = 0; i < categoryOrder.length; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (prevIndex < questionsUpToCategory + categoryQuestions.length) {\n          prevCategoryIndex = i;\n          break;\n        }\n        questionsUpToCategory += categoryQuestions.length;\n      }\n      \n      if (prevCategoryIndex !== currentCategoryIndex) {\n        setCurrentCategoryIndex(prevCategoryIndex);\n      }\n    }\n  }, [canGoPrevious, currentQuestionIndex, currentCategoryIndex]);\n\n  // Jump to specific question\n  const goToQuestion = useCallback((questionIndex) => {\n    if (questionIndex >= 0 && questionIndex < totalQuestions) {\n      setCurrentQuestionIndex(questionIndex);\n      \n      // Find the correct category\n      let categoryIndex = 0;\n      let questionsUpToCategory = 0;\n      \n      for (let i = 0; i < categoryOrder.length; i++) {\n        const categoryQuestions = getQuestionsByCategory(categoryOrder[i]);\n        if (questionIndex < questionsUpToCategory + categoryQuestions.length) {\n          categoryIndex = i;\n          break;\n        }\n        questionsUpToCategory += categoryQuestions.length;\n      }\n      \n      setCurrentCategoryIndex(categoryIndex);\n    }\n  }, [totalQuestions]);\n\n  // Get answers by category\n  const getAnswersByCategory = useCallback((category) => {\n    const categoryQuestions = getQuestionsByCategory(category);\n    const categoryAnswers = {};\n    \n    categoryQuestions.forEach(question => {\n      categoryAnswers[question.id] = answers[question.id] || '';\n    });\n    \n    return categoryAnswers;\n  }, [answers]);\n\n  // Check if category is complete\n  const isCategoryComplete = useCallback((category) => {\n    const categoryQuestions = getQuestionsByCategory(category);\n    return categoryQuestions.every(question => {\n      const answer = answers[question.id];\n      return !question.required || (answer && answer !== '');\n    });\n  }, [answers]);\n\n  return {\n    // Current state\n    currentQuestion,\n    currentCategory,\n    currentQuestionIndex,\n    currentCategoryIndex,\n    questionIndexInCategory,\n    isComplete,\n    \n    // Progress\n    progress,\n    categoryProgress,\n    totalQuestions,\n    \n    // Answers\n    answers,\n    setAnswer,\n    getAnswer,\n    getAnswersByCategory,\n    \n    // Navigation\n    canGoNext,\n    canGoPrevious,\n    goNext,\n    goPrevious,\n    goToQuestion,\n    \n    // Category info\n    isCategoryComplete,\n    \n    // Data\n    allQuestions,\n    currentCategoryQuestions\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}