{"ast":null,"code":"import { wealthCategories, WEALTH_CATEGORIES } from '../data/wealthCategories';\nimport { getQuestionsByCategory } from '../data/questions';\n\n// Analyze answers to identify key themes and values\nexport const analyzeAnswers = answers => {\n  const analysis = {\n    themes: [],\n    values: [],\n    priorities: {},\n    conflicts: [],\n    focusAreas: []\n  };\n\n  // Analyze each category\n  Object.keys(WEALTH_CATEGORIES).forEach(categoryKey => {\n    const categoryId = WEALTH_CATEGORIES[categoryKey];\n    const categoryAnswers = getCategoryAnswers(answers, categoryId);\n    const categoryAnalysis = analyzeCategoryAnswers(categoryAnswers, categoryId);\n    analysis.priorities[categoryId] = categoryAnalysis;\n  });\n\n  // Identify overarching themes\n  analysis.themes = identifyThemes(answers);\n  analysis.values = identifyValues(answers);\n  analysis.focusAreas = identifyFocusAreas(analysis.priorities);\n  analysis.conflicts = identifyConflicts(answers);\n  return analysis;\n};\n\n// Get answers for a specific category\nconst getCategoryAnswers = (answers, categoryId) => {\n  const questions = getQuestionsByCategory(categoryId);\n  const categoryAnswers = {};\n  questions.forEach(question => {\n    if (answers[question.id]) {\n      categoryAnswers[question.id] = {\n        question: question.question,\n        answer: answers[question.id],\n        type: question.type\n      };\n    }\n  });\n  return categoryAnswers;\n};\n\n// Analyze answers for a specific category\nconst analyzeCategoryAnswers = (categoryAnswers, categoryId) => {\n  const analysis = {\n    keyInsights: [],\n    completeness: 0,\n    priority: 'medium',\n    summary: ''\n  };\n  const answerCount = Object.keys(categoryAnswers).length;\n  const totalQuestions = getQuestionsByCategory(categoryId).length;\n  analysis.completeness = totalQuestions > 0 ? answerCount / totalQuestions * 100 : 0;\n\n  // Category-specific analysis\n  switch (categoryId) {\n    case WEALTH_CATEGORIES.TIME:\n      analysis.keyInsights = analyzeTimeWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.SOCIAL:\n      analysis.keyInsights = analyzeSocialWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.MENTAL:\n      analysis.keyInsights = analyzeMentalWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.PHYSICAL:\n      analysis.keyInsights = analyzePhysicalWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.FINANCIAL:\n      analysis.keyInsights = analyzeFinancialWealth(categoryAnswers);\n      break;\n  }\n\n  // Determine priority based on insights\n  analysis.priority = determinePriority(analysis.keyInsights, categoryAnswers);\n  analysis.summary = generateCategorySummary(categoryId, analysis.keyInsights);\n  return analysis;\n};\n\n// Category-specific analysis functions\nconst analyzeTimeWealth = answers => {\n  const insights = [];\n  Object.values(answers).forEach(({\n    question,\n    answer,\n    type\n  }) => {\n    if (question.includes('control') && type === 'rating_scale') {\n      if (answer <= 4) {\n        insights.push('Low control over daily schedule - opportunity for improvement');\n      } else if (answer >= 8) {\n        insights.push('High control over time - good foundation for optimization');\n      }\n    }\n    if (question.includes('energize') && answer) {\n      insights.push(`Energy patterns: ${answer.substring(0, 100)}...`);\n    }\n    if (question.includes('ideal week') && answer) {\n      insights.push('Has a clear vision for ideal time allocation');\n    }\n  });\n  return insights;\n};\nconst analyzeSocialWealth = answers => {\n  const insights = [];\n  Object.values(answers).forEach(({\n    question,\n    answer,\n    type\n  }) => {\n    if (question.includes('social environment')) {\n      insights.push(`Preferred social style: ${answer}`);\n    }\n    if (question.includes('alone time') && type === 'slider') {\n      if (answer <= 30) {\n        insights.push('Highly social - thrives on connection with others');\n      } else if (answer >= 70) {\n        insights.push('Values solitude - needs significant alone time');\n      } else {\n        insights.push('Balanced social needs - flexible between alone and social time');\n      }\n    }\n    if (question.includes('community') && answer) {\n      insights.push('Values community contribution and connection');\n    }\n  });\n  return insights;\n};\nconst analyzeMentalWealth = answers => {\n  const insights = [];\n  Object.values(answers).forEach(({\n    question,\n    answer\n  }) => {\n    if (question.includes('fulfilled') && answer) {\n      insights.push('Clear understanding of fulfilling activities');\n    }\n    if (question.includes('problems') && answer) {\n      insights.push('Identified meaningful problems to solve');\n    }\n    if (question.includes('purpose')) {\n      insights.push(`Primary purpose driver: ${answer}`);\n    }\n    if (question.includes('regret') && answer) {\n      insights.push('Has identified important life pursuits to explore');\n    }\n  });\n  return insights;\n};\nconst analyzePhysicalWealth = answers => {\n  const insights = [];\n  Object.values(answers).forEach(({\n    question,\n    answer\n  }) => {\n    if (question.includes('physical state') && answer) {\n      insights.push('Has a clear vision for physical wellbeing');\n    }\n    if (question.includes('food')) {\n      insights.push(`Food relationship: ${answer}`);\n    }\n    if (question.includes('physical activities') && answer) {\n      insights.push('Identified enjoyable movement and exercise preferences');\n    }\n    if (question.includes('rest') && answer) {\n      insights.push('Understands the importance of rest and recovery');\n    }\n  });\n  return insights;\n};\nconst analyzeFinancialWealth = answers => {\n  const insights = [];\n  Object.values(answers).forEach(({\n    question,\n    answer\n  }) => {\n    if (question.includes('lifestyle') && answer) {\n      insights.push('Clear vision for how money should enable desired lifestyle');\n    }\n    if (question.includes('relationship with money')) {\n      insights.push(`Money mindset: ${answer}`);\n    }\n    if (question.includes('enough') && answer) {\n      insights.push('Has thought about financial sufficiency');\n    }\n    if (question.includes('approach to earning')) {\n      insights.push(`Preferred earning approach: ${answer}`);\n    }\n  });\n  return insights;\n};\n\n// Identify overarching themes across all categories\nconst identifyThemes = answers => {\n  const themes = [];\n  const allAnswers = Object.values(answers).join(' ').toLowerCase();\n\n  // Look for common themes in text answers\n  const themeKeywords = {\n    'autonomy': ['freedom', 'independence', 'control', 'choice', 'flexible'],\n    'growth': ['learn', 'grow', 'develop', 'improve', 'challenge'],\n    'connection': ['relationship', 'family', 'friends', 'community', 'connect'],\n    'creativity': ['creative', 'art', 'express', 'create', 'innovate'],\n    'service': ['help', 'serve', 'contribute', 'impact', 'difference'],\n    'balance': ['balance', 'harmony', 'equilibrium', 'moderation'],\n    'achievement': ['success', 'accomplish', 'achieve', 'excel', 'win']\n  };\n  Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n    const score = keywords.reduce((count, keyword) => count + (allAnswers.match(new RegExp(keyword, 'g')) || []).length, 0);\n    if (score >= 3) {\n      themes.push(theme);\n    }\n  });\n  return themes;\n};\n\n// Identify core values from answers\nconst identifyValues = answers => {\n  const values = [];\n\n  // This would be more sophisticated in a real implementation\n  // For now, we'll extract some basic values based on question patterns\n\n  return values;\n};\n\n// Identify 2-3 focus areas based on analysis\nconst identifyFocusAreas = priorities => {\n  const focusAreas = [];\n\n  // Sort categories by priority and completeness\n  const categoryScores = Object.entries(priorities).map(([categoryId, analysis]) => ({\n    categoryId,\n    score: calculateFocusScore(analysis),\n    analysis\n  }));\n  categoryScores.sort((a, b) => b.score - a.score);\n\n  // Take top 2-3 categories as focus areas\n  focusAreas.push(...categoryScores.slice(0, 3).map(item => ({\n    category: item.categoryId,\n    reason: generateFocusReason(item.categoryId, item.analysis)\n  })));\n  return focusAreas;\n};\n\n// Calculate focus score for prioritization\nconst calculateFocusScore = analysis => {\n  let score = 0;\n\n  // Higher score for areas with more insights\n  score += analysis.keyInsights.length * 2;\n\n  // Higher score for incomplete areas (opportunity for growth)\n  if (analysis.completeness < 80) {\n    score += (100 - analysis.completeness) / 10;\n  }\n\n  // Priority weighting\n  const priorityWeight = {\n    'high': 3,\n    'medium': 2,\n    'low': 1\n  };\n  score += priorityWeight[analysis.priority] || 2;\n  return score;\n};\n\n// Generate reason for focus area selection\nconst generateFocusReason = (categoryId, analysis) => {\n  var _wealthCategories$cat;\n  const categoryName = ((_wealthCategories$cat = wealthCategories[categoryId]) === null || _wealthCategories$cat === void 0 ? void 0 : _wealthCategories$cat.title) || categoryId;\n  const insights = analysis.keyInsights;\n  if (insights.length === 0) {\n    return `${categoryName} needs attention - opportunity to develop this area further.`;\n  }\n  if (analysis.completeness < 50) {\n    return `${categoryName} is partially explored - completing this assessment will provide valuable insights.`;\n  }\n  return `${categoryName} shows strong foundation - ready for targeted development.`;\n};\n\n// Identify potential conflicts between categories\nconst identifyConflicts = answers => {\n  const conflicts = [];\n\n  // This would analyze for contradictions or tensions between different answers\n  // For example, wanting high income but also maximum flexibility\n\n  return conflicts;\n};\n\n// Determine priority level for a category\nconst determinePriority = (insights, answers) => {\n  if (insights.length >= 4) return 'high';\n  if (insights.length >= 2) return 'medium';\n  return 'low';\n};\n\n// Generate category summary\nconst generateCategorySummary = (categoryId, insights) => {\n  var _wealthCategories$cat2;\n  const categoryName = ((_wealthCategories$cat2 = wealthCategories[categoryId]) === null || _wealthCategories$cat2 === void 0 ? void 0 : _wealthCategories$cat2.title) || categoryId;\n  if (insights.length === 0) {\n    return `Your ${categoryName} area needs more exploration to develop a clear vision.`;\n  }\n  if (insights.length >= 3) {\n    return `You have a well-developed vision for your ${categoryName} with clear preferences and goals.`;\n  }\n  return `Your ${categoryName} vision is emerging with some clear preferences identified.`;\n};","map":{"version":3,"names":["wealthCategories","WEALTH_CATEGORIES","getQuestionsByCategory","analyzeAnswers","answers","analysis","themes","values","priorities","conflicts","focusAreas","Object","keys","forEach","categoryKey","categoryId","categoryAnswers","getCategoryAnswers","categoryAnalysis","analyzeCategoryAnswers","identifyThemes","identifyValues","identifyFocusAreas","identifyConflicts","questions","question","id","answer","type","keyInsights","completeness","priority","summary","answerCount","length","totalQuestions","TIME","analyzeTimeWealth","SOCIAL","analyzeSocialWealth","MENTAL","analyzeMentalWealth","PHYSICAL","analyzePhysicalWealth","FINANCIAL","analyzeFinancialWealth","determinePriority","generateCategorySummary","insights","includes","push","substring","allAnswers","join","toLowerCase","themeKeywords","entries","theme","keywords","score","reduce","count","keyword","match","RegExp","categoryScores","map","calculateFocusScore","sort","a","b","slice","item","category","reason","generateFocusReason","priorityWeight","_wealthCategories$cat","categoryName","title","_wealthCategories$cat2"],"sources":["/Users/derek.brimley/personal/vision_guide/vision-guide/src/utils/reportTemplates.js"],"sourcesContent":["import { wealthCategories, WEALTH_CATEGORIES } from '../data/wealthCategories';\nimport { getQuestionsByCategory } from '../data/questions';\n\n// Analyze answers to identify key themes and values\nexport const analyzeAnswers = (answers) => {\n  const analysis = {\n    themes: [],\n    values: [],\n    priorities: {},\n    conflicts: [],\n    focusAreas: []\n  };\n\n  // Analyze each category\n  Object.keys(WEALTH_CATEGORIES).forEach(categoryKey => {\n    const categoryId = WEALTH_CATEGORIES[categoryKey];\n    const categoryAnswers = getCategoryAnswers(answers, categoryId);\n    const categoryAnalysis = analyzeCategoryAnswers(categoryAnswers, categoryId);\n    \n    analysis.priorities[categoryId] = categoryAnalysis;\n  });\n\n  // Identify overarching themes\n  analysis.themes = identifyThemes(answers);\n  analysis.values = identifyValues(answers);\n  analysis.focusAreas = identifyFocusAreas(analysis.priorities);\n  analysis.conflicts = identifyConflicts(answers);\n\n  return analysis;\n};\n\n// Get answers for a specific category\nconst getCategoryAnswers = (answers, categoryId) => {\n  const questions = getQuestionsByCategory(categoryId);\n  const categoryAnswers = {};\n  \n  questions.forEach(question => {\n    if (answers[question.id]) {\n      categoryAnswers[question.id] = {\n        question: question.question,\n        answer: answers[question.id],\n        type: question.type\n      };\n    }\n  });\n  \n  return categoryAnswers;\n};\n\n// Analyze answers for a specific category\nconst analyzeCategoryAnswers = (categoryAnswers, categoryId) => {\n  const analysis = {\n    keyInsights: [],\n    completeness: 0,\n    priority: 'medium',\n    summary: ''\n  };\n\n  const answerCount = Object.keys(categoryAnswers).length;\n  const totalQuestions = getQuestionsByCategory(categoryId).length;\n  analysis.completeness = totalQuestions > 0 ? (answerCount / totalQuestions) * 100 : 0;\n\n  // Category-specific analysis\n  switch (categoryId) {\n    case WEALTH_CATEGORIES.TIME:\n      analysis.keyInsights = analyzeTimeWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.SOCIAL:\n      analysis.keyInsights = analyzeSocialWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.MENTAL:\n      analysis.keyInsights = analyzeMentalWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.PHYSICAL:\n      analysis.keyInsights = analyzePhysicalWealth(categoryAnswers);\n      break;\n    case WEALTH_CATEGORIES.FINANCIAL:\n      analysis.keyInsights = analyzeFinancialWealth(categoryAnswers);\n      break;\n  }\n\n  // Determine priority based on insights\n  analysis.priority = determinePriority(analysis.keyInsights, categoryAnswers);\n  analysis.summary = generateCategorySummary(categoryId, analysis.keyInsights);\n\n  return analysis;\n};\n\n// Category-specific analysis functions\nconst analyzeTimeWealth = (answers) => {\n  const insights = [];\n  \n  Object.values(answers).forEach(({ question, answer, type }) => {\n    if (question.includes('control') && type === 'rating_scale') {\n      if (answer <= 4) {\n        insights.push('Low control over daily schedule - opportunity for improvement');\n      } else if (answer >= 8) {\n        insights.push('High control over time - good foundation for optimization');\n      }\n    }\n    \n    if (question.includes('energize') && answer) {\n      insights.push(`Energy patterns: ${answer.substring(0, 100)}...`);\n    }\n    \n    if (question.includes('ideal week') && answer) {\n      insights.push('Has a clear vision for ideal time allocation');\n    }\n  });\n  \n  return insights;\n};\n\nconst analyzeSocialWealth = (answers) => {\n  const insights = [];\n  \n  Object.values(answers).forEach(({ question, answer, type }) => {\n    if (question.includes('social environment')) {\n      insights.push(`Preferred social style: ${answer}`);\n    }\n    \n    if (question.includes('alone time') && type === 'slider') {\n      if (answer <= 30) {\n        insights.push('Highly social - thrives on connection with others');\n      } else if (answer >= 70) {\n        insights.push('Values solitude - needs significant alone time');\n      } else {\n        insights.push('Balanced social needs - flexible between alone and social time');\n      }\n    }\n    \n    if (question.includes('community') && answer) {\n      insights.push('Values community contribution and connection');\n    }\n  });\n  \n  return insights;\n};\n\nconst analyzeMentalWealth = (answers) => {\n  const insights = [];\n  \n  Object.values(answers).forEach(({ question, answer }) => {\n    if (question.includes('fulfilled') && answer) {\n      insights.push('Clear understanding of fulfilling activities');\n    }\n    \n    if (question.includes('problems') && answer) {\n      insights.push('Identified meaningful problems to solve');\n    }\n    \n    if (question.includes('purpose')) {\n      insights.push(`Primary purpose driver: ${answer}`);\n    }\n    \n    if (question.includes('regret') && answer) {\n      insights.push('Has identified important life pursuits to explore');\n    }\n  });\n  \n  return insights;\n};\n\nconst analyzePhysicalWealth = (answers) => {\n  const insights = [];\n  \n  Object.values(answers).forEach(({ question, answer }) => {\n    if (question.includes('physical state') && answer) {\n      insights.push('Has a clear vision for physical wellbeing');\n    }\n    \n    if (question.includes('food')) {\n      insights.push(`Food relationship: ${answer}`);\n    }\n    \n    if (question.includes('physical activities') && answer) {\n      insights.push('Identified enjoyable movement and exercise preferences');\n    }\n    \n    if (question.includes('rest') && answer) {\n      insights.push('Understands the importance of rest and recovery');\n    }\n  });\n  \n  return insights;\n};\n\nconst analyzeFinancialWealth = (answers) => {\n  const insights = [];\n  \n  Object.values(answers).forEach(({ question, answer }) => {\n    if (question.includes('lifestyle') && answer) {\n      insights.push('Clear vision for how money should enable desired lifestyle');\n    }\n    \n    if (question.includes('relationship with money')) {\n      insights.push(`Money mindset: ${answer}`);\n    }\n    \n    if (question.includes('enough') && answer) {\n      insights.push('Has thought about financial sufficiency');\n    }\n    \n    if (question.includes('approach to earning')) {\n      insights.push(`Preferred earning approach: ${answer}`);\n    }\n  });\n  \n  return insights;\n};\n\n// Identify overarching themes across all categories\nconst identifyThemes = (answers) => {\n  const themes = [];\n  const allAnswers = Object.values(answers).join(' ').toLowerCase();\n  \n  // Look for common themes in text answers\n  const themeKeywords = {\n    'autonomy': ['freedom', 'independence', 'control', 'choice', 'flexible'],\n    'growth': ['learn', 'grow', 'develop', 'improve', 'challenge'],\n    'connection': ['relationship', 'family', 'friends', 'community', 'connect'],\n    'creativity': ['creative', 'art', 'express', 'create', 'innovate'],\n    'service': ['help', 'serve', 'contribute', 'impact', 'difference'],\n    'balance': ['balance', 'harmony', 'equilibrium', 'moderation'],\n    'achievement': ['success', 'accomplish', 'achieve', 'excel', 'win']\n  };\n  \n  Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n    const score = keywords.reduce((count, keyword) => \n      count + (allAnswers.match(new RegExp(keyword, 'g')) || []).length, 0);\n    \n    if (score >= 3) {\n      themes.push(theme);\n    }\n  });\n  \n  return themes;\n};\n\n// Identify core values from answers\nconst identifyValues = (answers) => {\n  const values = [];\n  \n  // This would be more sophisticated in a real implementation\n  // For now, we'll extract some basic values based on question patterns\n  \n  return values;\n};\n\n// Identify 2-3 focus areas based on analysis\nconst identifyFocusAreas = (priorities) => {\n  const focusAreas = [];\n  \n  // Sort categories by priority and completeness\n  const categoryScores = Object.entries(priorities).map(([categoryId, analysis]) => ({\n    categoryId,\n    score: calculateFocusScore(analysis),\n    analysis\n  }));\n  \n  categoryScores.sort((a, b) => b.score - a.score);\n  \n  // Take top 2-3 categories as focus areas\n  focusAreas.push(...categoryScores.slice(0, 3).map(item => ({\n    category: item.categoryId,\n    reason: generateFocusReason(item.categoryId, item.analysis)\n  })));\n  \n  return focusAreas;\n};\n\n// Calculate focus score for prioritization\nconst calculateFocusScore = (analysis) => {\n  let score = 0;\n  \n  // Higher score for areas with more insights\n  score += analysis.keyInsights.length * 2;\n  \n  // Higher score for incomplete areas (opportunity for growth)\n  if (analysis.completeness < 80) {\n    score += (100 - analysis.completeness) / 10;\n  }\n  \n  // Priority weighting\n  const priorityWeight = {\n    'high': 3,\n    'medium': 2,\n    'low': 1\n  };\n  score += priorityWeight[analysis.priority] || 2;\n  \n  return score;\n};\n\n// Generate reason for focus area selection\nconst generateFocusReason = (categoryId, analysis) => {\n  const categoryName = wealthCategories[categoryId]?.title || categoryId;\n  const insights = analysis.keyInsights;\n  \n  if (insights.length === 0) {\n    return `${categoryName} needs attention - opportunity to develop this area further.`;\n  }\n  \n  if (analysis.completeness < 50) {\n    return `${categoryName} is partially explored - completing this assessment will provide valuable insights.`;\n  }\n  \n  return `${categoryName} shows strong foundation - ready for targeted development.`;\n};\n\n// Identify potential conflicts between categories\nconst identifyConflicts = (answers) => {\n  const conflicts = [];\n  \n  // This would analyze for contradictions or tensions between different answers\n  // For example, wanting high income but also maximum flexibility\n  \n  return conflicts;\n};\n\n// Determine priority level for a category\nconst determinePriority = (insights, answers) => {\n  if (insights.length >= 4) return 'high';\n  if (insights.length >= 2) return 'medium';\n  return 'low';\n};\n\n// Generate category summary\nconst generateCategorySummary = (categoryId, insights) => {\n  const categoryName = wealthCategories[categoryId]?.title || categoryId;\n  \n  if (insights.length === 0) {\n    return `Your ${categoryName} area needs more exploration to develop a clear vision.`;\n  }\n  \n  if (insights.length >= 3) {\n    return `You have a well-developed vision for your ${categoryName} with clear preferences and goals.`;\n  }\n  \n  return `Your ${categoryName} vision is emerging with some clear preferences identified.`;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}