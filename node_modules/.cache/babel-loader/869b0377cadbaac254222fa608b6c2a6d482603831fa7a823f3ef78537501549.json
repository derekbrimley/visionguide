{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = useCallback(value => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n\n  // Function to remove the key from localStorage\n  const removeValue = useCallback(() => {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, initialValue]);\n  return [storedValue, setValue, removeValue];\n};\n\n// Hook for managing questionnaire data persistence\n_s(useLocalStorage, \"VtZ85yf6ksVqtI21quxl2gGW1WA=\");\nexport const useQuestionnaireStorage = () => {\n  _s2();\n  const [answers, setAnswers, clearAnswers] = useLocalStorage('vision-guide-answers', {});\n  const [currentQuestionIndex, setCurrentQuestionIndex, clearCurrentIndex] = useLocalStorage('vision-guide-current-question', 0);\n  const [sessionId, setSessionId, clearSessionId] = useLocalStorage('vision-guide-session-id', null);\n\n  // Generate a new session ID if one doesn't exist\n  useEffect(() => {\n    if (!sessionId) {\n      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      setSessionId(newSessionId);\n    }\n  }, [sessionId, setSessionId]);\n\n  // Save complete session data\n  const saveSession = useCallback(data => {\n    const sessionData = {\n      ...data,\n      sessionId: sessionId,\n      lastUpdated: new Date().toISOString(),\n      version: '1.0'\n    };\n\n    // Save current session\n    window.localStorage.setItem('vision-guide-session', JSON.stringify(sessionData));\n\n    // Save to session history\n    const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n    const existingIndex = sessionHistory.findIndex(s => s.sessionId === sessionId);\n    if (existingIndex >= 0) {\n      sessionHistory[existingIndex] = sessionData;\n    } else {\n      sessionHistory.push(sessionData);\n    }\n\n    // Keep only last 10 sessions\n    if (sessionHistory.length > 10) {\n      sessionHistory.splice(0, sessionHistory.length - 10);\n    }\n    window.localStorage.setItem('vision-guide-sessions', JSON.stringify(sessionHistory));\n  }, [sessionId]);\n\n  // Load session data\n  const loadSession = useCallback(loadSessionId => {\n    try {\n      const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n      const session = sessionHistory.find(s => s.sessionId === loadSessionId);\n      if (session) {\n        setAnswers(session.answers || {});\n        setCurrentQuestionIndex(session.currentQuestionIndex || 0);\n        setSessionId(session.sessionId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error loading session:', error);\n      return false;\n    }\n  }, [setAnswers, setCurrentQuestionIndex, setSessionId]);\n\n  // Get all saved sessions\n  const getSavedSessions = useCallback(() => {\n    try {\n      const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n      return sessionHistory.sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));\n    } catch (error) {\n      console.error('Error getting saved sessions:', error);\n      return [];\n    }\n  }, []);\n\n  // Clear all data\n  const clearAll = useCallback(() => {\n    clearAnswers();\n    clearCurrentIndex();\n    clearSessionId();\n    window.localStorage.removeItem('vision-guide-session');\n  }, [clearAnswers, clearCurrentIndex, clearSessionId]);\n  return {\n    answers,\n    setAnswers,\n    currentQuestionIndex,\n    setCurrentQuestionIndex,\n    sessionId,\n    saveSession,\n    loadSession,\n    getSavedSessions,\n    clearAll\n  };\n};\n_s2(useQuestionnaireStorage, \"tdz5yPzgVRt4ha387PNl3nbiFmk=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","removeValue","removeItem","useQuestionnaireStorage","_s2","answers","setAnswers","clearAnswers","currentQuestionIndex","setCurrentQuestionIndex","clearCurrentIndex","sessionId","setSessionId","clearSessionId","newSessionId","Date","now","Math","random","toString","substr","saveSession","data","sessionData","lastUpdated","toISOString","version","sessionHistory","existingIndex","findIndex","s","push","length","splice","loadSession","loadSessionId","session","find","getSavedSessions","sort","a","b","clearAll"],"sources":["/Users/derek.brimley/personal/vision_guide/vision-guide/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the new value to localStorage\n  const setValue = useCallback((value) => {\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, storedValue]);\n\n  // Function to remove the key from localStorage\n  const removeValue = useCallback(() => {\n    try {\n      window.localStorage.removeItem(key);\n      setStoredValue(initialValue);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key, initialValue]);\n\n  return [storedValue, setValue, removeValue];\n};\n\n// Hook for managing questionnaire data persistence\nexport const useQuestionnaireStorage = () => {\n  const [answers, setAnswers, clearAnswers] = useLocalStorage('vision-guide-answers', {});\n  const [currentQuestionIndex, setCurrentQuestionIndex, clearCurrentIndex] = useLocalStorage('vision-guide-current-question', 0);\n  const [sessionId, setSessionId, clearSessionId] = useLocalStorage('vision-guide-session-id', null);\n\n  // Generate a new session ID if one doesn't exist\n  useEffect(() => {\n    if (!sessionId) {\n      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      setSessionId(newSessionId);\n    }\n  }, [sessionId, setSessionId]);\n\n  // Save complete session data\n  const saveSession = useCallback((data) => {\n    const sessionData = {\n      ...data,\n      sessionId: sessionId,\n      lastUpdated: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    // Save current session\n    window.localStorage.setItem('vision-guide-session', JSON.stringify(sessionData));\n    \n    // Save to session history\n    const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n    const existingIndex = sessionHistory.findIndex(s => s.sessionId === sessionId);\n    \n    if (existingIndex >= 0) {\n      sessionHistory[existingIndex] = sessionData;\n    } else {\n      sessionHistory.push(sessionData);\n    }\n    \n    // Keep only last 10 sessions\n    if (sessionHistory.length > 10) {\n      sessionHistory.splice(0, sessionHistory.length - 10);\n    }\n    \n    window.localStorage.setItem('vision-guide-sessions', JSON.stringify(sessionHistory));\n  }, [sessionId]);\n\n  // Load session data\n  const loadSession = useCallback((loadSessionId) => {\n    try {\n      const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n      const session = sessionHistory.find(s => s.sessionId === loadSessionId);\n      \n      if (session) {\n        setAnswers(session.answers || {});\n        setCurrentQuestionIndex(session.currentQuestionIndex || 0);\n        setSessionId(session.sessionId);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error loading session:', error);\n      return false;\n    }\n  }, [setAnswers, setCurrentQuestionIndex, setSessionId]);\n\n  // Get all saved sessions\n  const getSavedSessions = useCallback(() => {\n    try {\n      const sessionHistory = JSON.parse(window.localStorage.getItem('vision-guide-sessions') || '[]');\n      return sessionHistory.sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));\n    } catch (error) {\n      console.error('Error getting saved sessions:', error);\n      return [];\n    }\n  }, []);\n\n  // Clear all data\n  const clearAll = useCallback(() => {\n    clearAnswers();\n    clearCurrentIndex();\n    clearSessionId();\n    window.localStorage.removeItem('vision-guide-session');\n  }, [clearAnswers, clearCurrentIndex, clearSessionId]);\n\n  return {\n    answers,\n    setAnswers,\n    currentQuestionIndex,\n    setCurrentQuestionIndex,\n    sessionId,\n    saveSession,\n    loadSession,\n    getSavedSessions,\n    clearAll\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}